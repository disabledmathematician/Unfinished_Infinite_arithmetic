#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 22 11:06:54 2023

Copyright Charles Thomas Wallace Truscott

Byron Bay 127 Broken Head Rd NSW 2481 Australia

:-)
"""

class Arithmetic(object):
    
    def __init__(self, number):
        self.number = str(number)
        self.part = number.split('.')
        self.l_part = str(self.part[0])
        self.r_part = str(self.part[1])
        
    def __add__(self, v):
#        apc = 0
#        lpc = 0
##        print("self.r_part[0]: {}".format(self.r_part[0]))
#        if v.r_part[0] == '0':
#            for x in range(len(v.r_part)):
##                print("fl {} {} {}".format(x, v.r_part[x], apc))
#                if v.r_part[x] != '0':
#                    break
#                else:
#                    apc += 1
#            v.r_part = int(v.r_part)
#            v.r_part /= (10 ** apc)
#        if self.r_part[0] == '0':
#            for x in range(len(self.r_part)):
#                if self.r_part[x] != '0':
#                    break
#                else:
#                    lpc += 1
#            self.r_part = int(self.r_part)
#            self.r_part /= (10 ** lpc)
#        print("apc: {} lpc: {}".format(apc, lpc))
        left_summand = int(self.l_part)
        right_summand = int(self.r_part)
        left_summand_two = int(v.l_part)
        right_summand_two = int(v.r_part)
        lrs1 = len(str(self.r_part))
        lrs2 = len(str(v.r_part))
        c = left_summand + left_summand_two
        q = right_summand + right_summand_two
        z = lrs1 if lrs1 >= lrs2 else lrs2
        j = len(str(q))
        x = abs(j - z)
        if x > 0:
            sq = str(q)
            print(sq, type(sq))
            num = int(sq[0:x])
            c += num
        r = str('{}.{}'.format(c, str(q)[x:]))
 #       print(r)
        return Arithmetic(r)
    def __sub__(self, v):
 #        apc = 0
#        lpc = 0
##        print("self.r_part[0]: {}".format(self.r_part[0]))
#        if v.r_part[0] == '0':
#            for x in range(len(v.r_part)):
##                print("fl {} {} {}".format(x, v.r_part[x], apc))
#                if v.r_part[x] != '0':
#                    break
#                else:
#                    apc += 1
#            v.r_part = int(v.r_part)
#            v.r_part /= (10 ** apc)
#        if self.r_part[0] == '0':
#            for x in range(len(self.r_part)):
#                if self.r_part[x] != '0':
#                    break
#                else:
#                    lpc += 1
#            self.r_part = int(self.r_part)
#            self.r_part /= (10 ** lpc)
#        print("apc: {} lpc: {}".format(apc, lpc))
        left_summand = int(self.l_part)
        right_summand = int(self.r_part)
        left_summand_two = int(v.l_part)
        right_summand_two = int(v.r_part)
        lrs1 = len(str(self.r_part))
        lrs2 = len(str(v.r_part))
        lrsb = lrs1 if lrs1 >= lrs2 else lrs2
        c = left_summand + (-left_summand_two)
        q = right_summand + (-right_summand_two)
        z = lrs1 if lrs1 >= lrs2 else lrs2
        j = len(str(q))
        x = abs(j - z)
#        if x > 0:
#            sq = str(q)
#            print(sq, type(sq))
#            num = int(sq[0:x])
#            c += num
#        print(lrsb, q, abs(q) - int('9'*(lrsb)))
        if right_summand < right_summand_two:
            if q < 0:
                c -= 1
            q = abs(q) - int(str('9'*lrsb))
        if q == 0:
            q = str('0'*lrsb)
            r = str('{}.{}'.format(c, q))
        else:
            r = str('{}.{}'.format(c, str(abs(q))[0:]))
#        print(r)
        return Arithmetic(r)
    def __mul__(self):
        pass
    def __truediv__(self):
        pass
    def __floordiv__(self):
        pass
    def __pow__(self):
        pass
    def __str__(self):
        return self.number
    
def CharlesTruscottApproachArithmetic():
#    number = Arithmetic("00000000.0000000000")
#    number_also = Arithmetic("3333333333.33333333333333333333")
#    for x in range(0, 2):
#        number_also = number_also + number_also
#    print(number_also + Arithmetic("3333333333.33333333333333333333"))
	Tai = "1990.10"
	Charles = "1993.13"
	Mark = "1955.10"
	import random
	for x in range(999):
	   x = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
	   y = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
	   z = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])
	   Tai += str(x)
	   Charles += str(y)
	   Mark += str(z)
	tainum = Arithmetic(Tai)
	charlesnum = Arithmetic(Charles)
	marknum = Arithmetic(Mark)
	TPM = tainum + marknum
	MarkPlusCharles = marknum + charlesnum
	MPCLT = MarkPlusCharles - TPM
	print("My example of thousand digit floating point in my own code.\nAuthored by Charles Truscott\n")
	print("Tai: {}\nCharles: {}\nMark: {}".format(Tai, Charles, Mark))
	print("Tai Plus Mark: {}\n Mark Plus Charles: {}\n Mark Plus Charles Minus Tai Plus Mark: {}".format(TPM, MarkPlusCharles, MPCLT))
if __name__ == "__main__": CharlesTruscottApproachArithmetic()

"""

My example of thousand digit floating point in my own code.
Authored by Charles Truscott

Tai: 1990.10176529557673668985122878121734698521207550372066286172712739750034946658336945506384387514360140465417483319309371788210379625361963171012187563564818584889261307906009713340650331717425561528722677185336356191061036752782828851525019324032170695928812200772700906114782988873976843749293398014100955271696541713556198795971384614870272216519532094465574775537514373081469757185566909052078121191751228055491513969214406454192288688343565693552728631127686454033203232210024929849434121494531800970496051198758154003367683313363980537871739304216454121483633994252925575400205035278210973895623317703041972797034238708678467088799649674311558659083891396336285613366086688307093187011573268225301474471603698239740849552090235732773294315141690092546583776877678657850865970920480865026760655726738969147382454501622132285656541530577958527910430818864826063367756333692863750169728483117363872430415648060498292912773426241754773922650143301538975128402109022208878447981948533899616816054230426522
Charles: 1993.13005066574270519097181393993306139855836759735429609785520460215920936589569115504008640427303154152057962488381116910713783142073668554377678889245458617227833029239206350620910037403556020981555271708421595966667119652371758577948739093025827941568797269681469245374935228158244029419664082288188357386401283415186256861261860278453918727260289245123848295879555920892902518669578114473371570786659863074923402714443380327062107479407875148929597429679858210369805845039470258699053501867980700143715056316150329746451152414543516518476896235994124685315724665331675788872464082147550983960051590962510884970391510990029448599874942548521523489519969070943070355897090493400907968770612844571353132061816332558335930922568242661522070662007042007903995983196642893407596577658870549558343866466590362839551985110220734357158040834028952835924560574190859364032729197070084004069648068432206626310088334121861866532898004875281137962484556906450406310879721102536126029422355753221051308196140507470
Mark: 1955.10349778868669947896794925395166064038384887182004872792156194222519155183149720431881767222399723071359059425161222281999133319232060517737074939105096702485518734466858432770750309724136346730465359230493600276604527005166829057679051699288713616562917961713566914014144783076357039409429747781134034059519881066130078919901266320015646792286639815295563921080421218755836178627170204399178932638166916438434866417213795633787434667803525779565618803489287567997569243528558158786859584086833053057586998327611308828563252456022772503148265410939234117897527883807500664496627381896589681369203967478814911517444522560819179298758596071110375004213208160550752189464137868475402823718892334304560410418013870301369404768219107837017327193454158298972086779202367845371825014033626887261193591208329060678230639173671885125098376466664638835129286082984614426836251627408524739019645275593662702594103889691381356554228119533257144338540786047012860416650168394302973590508464878914460866504387853053
Tai Plus Mark: 3945.20526308426343616881917803516900762559592437554071158964868933972554101841486665938266154736759863536776542744470594070209512944594023688749262502669915287374780042372868146111400641441561908259188036415829956467665563757949657909204071023320884312491730162486267820128927771950333883158723145795234989331216422779686277715872650934885919008806171909761138696617935591837305935812737113451257053829918144493926380386428202087979723356147091473118347434616974022030772475738583088636293705581364854028083049526369462831930935769386753041020004715155688239381161878060426239896832417174800655264827285181856884314478761269497646387558245745421933663297099556887037802830224556782496010730465602529861884889617568541110254320309343569790621508595848391518670556080046503222690984954107752287954246935068029825613093675294017410754917997242597363039716901849440490204007961101388489189373758711026575024519537751879649467001545775011918261190929348551835545052277416511852038490413412814077682558618279575
 Mark Plus Charles: 3948.23354845442940466993976319388472203894221646917434482577676654438440091772718835935890407649702877223417021913542339192712916461305729072114753828350555319713351763706064783391660347127692367712020630938915196243271646657538587635627790792314541558131715231395036159389080011234601068829093830069322391445921164481316335781163126598469565519546929060419412216959977139648738697296748318872550503424826779513358269131657175960849542147211400928495216233169145778367375088568028417485913085954813753201302054643761638575014404870566289021625161646933358803213252549139176453369091464044140665329255558441325796487836033550848627898633538619631898493733177231493822545361228361876310792489505178875913542479830202859705335690787350498539397855461200306876082762399010738779421591692497436819537457674919423517782624283892619482256417300693591671053846657175473790868980824478608743089293344025869328904192223813243223087126124408538282301025342953463266727529889496839099619930820632135512174700528360523
 Mark Plus Charles Minus Tai Plus Mark: 3.2828537016596850112058515871571441334629209363363323612807720465885989931232169997624252912943013686640479169071745122503403516711705383365491325680640032338571721333196637280259705686130459452832594523085239775606082899588929726423719768993657245639985068908768339260152239284267185670370684274087402114704741701630058065290475663583646510740757150658273520342041547811432761484011205421293449594908635019431888745228973872869818791064309455376868798552171756336602612829445328849619380373448899173219005117392175743083469101179535980605156931777670563832090671078750213472259046869340010064428273259468912173357272281350981511075292874209964830436077674606784742531003805093814781759039576346051657590212634318595081370478006928748776346865351915357412206318964235556730606738389684531583210739851393692169530608598602071501499303450994308014129755326033300664972863377220253899919585314842753879672686061363573620124578633526364039834413604911431182477612080327247581440407219321434492141910080948

[Program finished]

"""